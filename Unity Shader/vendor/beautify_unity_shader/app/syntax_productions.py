from .syntax_nonterminal import Nonterminal
from .syntax_production import Production
from .lex_tokens import TokenType as T
from .syntax_nonterminals import NonterminalType as N
import unittest


productionList = [
    Production("prog ->  'Shader' String { shader_body_elms }",
               'p1',
               N.prog,
               ('Shader', T.String, T.LBrace, N.shader_body_elms, T.RBrace, )),
    Production("shader_body_elms ->  shader_body_elm shader_body_elms",
               'p2',
               N.shader_body_elms,
               (N.shader_body_elm, N.shader_body_elms, )),
    Production("shader_body_elms -> ",
               'p3',
               N.shader_body_elms,
               ()),
    Production("shader_body_elm ->  props",
               'p4',
               N.shader_body_elm,
               (N.props, )),
    Production("shader_body_elm ->  category",
               'p5',
               N.shader_body_elm,
               (N.category, )),
    Production("shader_body_elm ->  subshr",
               'p6',
               N.shader_body_elm,
               (N.subshr, )),
    Production("shader_body_elm ->  cg_prog",
               'p7',
               N.shader_body_elm,
               (N.cg_prog, )),
    Production("shader_body_elm ->  fall_back_cmd",
               'p8',
               N.shader_body_elm,
               (N.fall_back_cmd, )),
    Production("shader_body_elm ->  custom_editor_cmd",
               'p9',
               N.shader_body_elm,
               (N.custom_editor_cmd, )),
    Production("shader_body_elm ->  dependency_cmd",
               'p10',
               N.shader_body_elm,
               (N.dependency_cmd, )),
    Production("props ->  'Properties' { props_body }",
               'p11',
               N.props,
               ('Properties', T.LBrace, N.props_body, T.RBrace, )),
    Production("props_body ->  prop_stm props_body",
               'p12',
               N.props_body,
               (N.prop_stm, N.props_body, )),
    Production("props_body -> ",
               'p13',
               N.props_body,
               ()),
    Production("prop_stm ->  ID ( String , prop_type ) = prop_init",
               'p14',
               N.prop_stm,
               (T.ID, T.LParen, T.String, T.Comma, N.prop_type, T.RParen, T.Assign, N.prop_init, )),
    Production("prop_stm ->  [ ID ] ID ( String , prop_type ) = prop_init",
               'p15',
               N.prop_stm,
               (T.LBrack, T.ID, T.RBrack, T.ID, T.LParen, T.String, T.Comma, N.prop_type, T.RParen, T.Assign, N.prop_init, )),
    Production("prop_stm ->  [ ID ] [ ID ] ID ( String , prop_type ) = prop_init",
               'p16',
               N.prop_stm,
               (T.LBrack, T.ID, T.RBrack, T.LBrack, T.ID, T.RBrack, T.ID, T.LParen, T.String, T.Comma, N.prop_type, T.RParen, T.Assign, N.prop_init, )),
    Production("prop_stm ->  [ 'Enum' ( enum_items ) ] ID ( String , prop_type ) = prop_init",
               'p17',
               N.prop_stm,
               (T.LBrack, 'Enum', T.LParen, N.enum_items, T.RParen, T.RBrack, T.ID, T.LParen, T.String, T.Comma, N.prop_type, T.RParen, T.Assign, N.prop_init, )),
    Production("prop_stm ->  [ 'MaterialEnum' ( enum_items ) ] ID ( String , prop_type ) = prop_init",
               'p18',
               N.prop_stm,
               (T.LBrack, 'MaterialEnum', T.LParen, N.enum_items, T.RParen, T.RBrack, T.ID, T.LParen, T.String, T.Comma, N.prop_type, T.RParen, T.Assign, N.prop_init, )),
    Production("prop_stm ->  [ 'KeywordEnum' ( enum_items ) ] ID ( String , prop_type ) = prop_init",
               'p19',
               N.prop_stm,
               (T.LBrack, 'KeywordEnum', T.LParen, N.enum_items, T.RParen, T.RBrack, T.ID, T.LParen, T.String, T.Comma, N.prop_type, T.RParen, T.Assign, N.prop_init, )),
    Production("prop_stm ->  [ 'Toggle' ( ID ) ] ID ( String , prop_type ) = prop_init",
               'p20',
               N.prop_stm,
               (T.LBrack, 'Toggle', T.LParen, T.ID, T.RParen, T.RBrack, T.ID, T.LParen, T.String, T.Comma, N.prop_type, T.RParen, T.Assign, N.prop_init, )),
    Production("prop_stm ->  [ 'MaterialToggle' ] ID ( String , prop_type ) = prop_init",
               'p21',
               N.prop_stm,
               (T.LBrack, 'MaterialToggle', T.RBrack, T.ID, T.LParen, T.String, T.Comma, N.prop_type, T.RParen, T.Assign, N.prop_init, )),
    Production("prop_stm ->  [ 'ToggleOff' ] ID ( String , prop_type ) = prop_init",
               'p22',
               N.prop_stm,
               (T.LBrack, 'ToggleOff', T.RBrack, T.ID, T.LParen, T.String, T.Comma, N.prop_type, T.RParen, T.Assign, N.prop_init, )),
    Production("prop_type ->  'Color'",
               'p23',
               N.prop_type,
               ('Color', )),
    Production("prop_type ->  'Vector'",
               'p24',
               N.prop_type,
               ('Vector', )),
    Production("prop_type ->  'Range'",
               'p25',
               N.prop_type,
               ('Range', )),
    Production("prop_type ->  'Int'",
               'p26',
               N.prop_type,
               ('Int', )),
    Production("prop_type ->  'Float'",
               'p27',
               N.prop_type,
               ('Float', )),
    Production("prop_type ->  '2D'",
               'p28',
               N.prop_type,
               ('2D', )),
    Production("prop_type ->  'Cube'",
               'p29',
               N.prop_type,
               ('Cube', )),
    Production("prop_type ->  '3D'",
               'p30',
               N.prop_type,
               ('3D', )),
    Production("prop_type ->  'Any'",
               'p31',
               N.prop_type,
               ('Any', )),
    Production("prop_type ->  'Range' ( Number , Number )",
               'p32',
               N.prop_type,
               ('Range', T.LParen, T.Number, T.Comma, T.Number, T.RParen, )),
    Production("prop_init ->  Number",
               'p33',
               N.prop_init,
               (T.Number, )),
    Production("prop_init ->  String { }",
               'p34',
               N.prop_init,
               (T.String, T.LBrace, T.RBrace, )),
    Production("prop_init ->  String { ID }",
               'p35',
               N.prop_init,
               (T.String, T.LBrace, T.ID, T.RBrace, )),
    Production("prop_init ->  ( Number , Number , Number )",
               'p36',
               N.prop_init,
               (T.LParen, T.Number, T.Comma, T.Number, T.Comma, T.Number, T.RParen, )),
    Production("prop_init ->  ( Number , Number , Number , Number )",
               'p37',
               N.prop_init,
               (T.LParen, T.Number, T.Comma, T.Number, T.Comma, T.Number, T.Comma, T.Number, T.RParen, )),
    Production("enum_items ->  enum_item",
               'p38',
               N.enum_items,
               (N.enum_item, )),
    Production("enum_items ->  enum_item , enum_items",
               'p39',
               N.enum_items,
               (N.enum_item, T.Comma, N.enum_items, )),
    Production("enum_item ->  id_list",
               'p40',
               N.enum_item,
               (N.id_list, )),
    Production("enum_item ->  Number",
               'p41',
               N.enum_item,
               (T.Number, )),
    Production("category ->  'Category' { category_body_elms }",
               'p42',
               N.category,
               ('Category', T.LBrace, N.category_body_elms, T.RBrace, )),
    Production("category_body_elms ->  category_body_elm category_body_elms",
               'p43',
               N.category_body_elms,
               (N.category_body_elm, N.category_body_elms, )),
    Production("category_body_elms -> ",
               'p44',
               N.category_body_elms,
               ()),
    Production("category_body_elm ->  cmd_stm",
               'p45',
               N.category_body_elm,
               (N.cmd_stm, )),
    Production("category_body_elm ->  subshr",
               'p46',
               N.category_body_elm,
               (N.subshr, )),
    Production("subshr ->  'SubShader' { subshr_body_elms }",
               'p47',
               N.subshr,
               ('SubShader', T.LBrace, N.subshr_body_elms, T.RBrace, )),
    Production("subshr_body_elms ->  subshr_body_elm subshr_body_elms",
               'p48',
               N.subshr_body_elms,
               (N.subshr_body_elm, N.subshr_body_elms, )),
    Production("subshr_body_elms -> ",
               'p49',
               N.subshr_body_elms,
               ()),
    Production("subshr_body_elm ->  cmd_stm",
               'p50',
               N.subshr_body_elm,
               (N.cmd_stm, )),
    Production("subshr_body_elm ->  shr_pass",
               'p51',
               N.subshr_body_elm,
               (N.shr_pass, )),
    Production("subshr_body_elm ->  cg_prog",
               'p52',
               N.subshr_body_elm,
               (N.cg_prog, )),
    Production("cmd_stm ->  cmd_name id_or_number_or_placeholder",
               'p53',
               N.cmd_stm,
               (N.cmd_name, N.id_or_number_or_placeholder, )),
    Production("cmd_stm ->  'Alphatest' ID",
               'p54',
               N.cmd_stm,
               ('Alphatest', T.ID, )),
    Production("cmd_stm ->  'Alphatest' ID placeholder",
               'p55',
               N.cmd_stm,
               ('Alphatest', T.ID, N.placeholder, )),
    Production("cmd_stm ->  'BindChannels' { bind_channel_stms }",
               'p56',
               N.cmd_stm,
               ('BindChannels', T.LBrace, N.bind_channel_stms, T.RBrace, )),
    Production("cmd_stm ->  'Blend' ID",
               'p57',
               N.cmd_stm,
               ('Blend', T.ID, )),
    Production("cmd_stm ->  'Blend' id_or_number_or_placeholder id_or_number_or_placeholder",
               'p58',
               N.cmd_stm,
               ('Blend', N.id_or_number_or_placeholder, N.id_or_number_or_placeholder, )),
    Production("cmd_stm ->  'Fog' { 'Mode' ID }",
               'p59',
               N.cmd_stm,
               ('Fog', T.LBrace, 'Mode', T.ID, T.RBrace, )),
    Production("cmd_stm ->  'Fog' { 'Color' ( Number , Number , Number , Number ) }",
               'p60',
               N.cmd_stm,
               ('Fog', T.LBrace, 'Color', T.LParen, T.Number, T.Comma, T.Number, T.Comma, T.Number, T.Comma, T.Number, T.RParen, T.RBrace, )),
    Production("cmd_stm ->  'Material' { meterial_stms }",
               'p61',
               N.cmd_stm,
               ('Material', T.LBrace, N.meterial_stms, T.RBrace, )),
    Production("cmd_stm ->  'Name' String",
               'p62',
               N.cmd_stm,
               ('Name', T.String, )),
    Production("cmd_stm ->  'Offset' id_or_number_or_placeholder , id_or_number_or_placeholder",
               'p63',
               N.cmd_stm,
               ('Offset', N.id_or_number_or_placeholder, T.Comma, N.id_or_number_or_placeholder, )),
    Production("cmd_stm ->  'Stencil' { stencil_stms }",
               'p64',
               N.cmd_stm,
               ('Stencil', T.LBrace, N.stencil_stms, T.RBrace, )),
    Production("cmd_stm ->  'SetTexture' placeholder { set_texture_stms }",
               'p65',
               N.cmd_stm,
               ('SetTexture', N.placeholder, T.LBrace, N.set_texture_stms, T.RBrace, )),
    Production("cmd_stm ->  'Tags' { tags_stms }",
               'p66',
               N.cmd_stm,
               ('Tags', T.LBrace, N.tags_stms, T.RBrace, )),
    Production("cmd_name ->  'AlphaToMask'",
               'p67',
               N.cmd_name,
               ('AlphaToMask', )),
    Production("cmd_name ->  'ColorMask'",
               'p68',
               N.cmd_name,
               ('ColorMask', )),
    Production("cmd_name ->  'ColorMaterial'",
               'p69',
               N.cmd_name,
               ('ColorMaterial', )),
    Production("cmd_name ->  'Cull'",
               'p70',
               N.cmd_name,
               ('Cull', )),
    Production("cmd_name ->  'Lighting'",
               'p71',
               N.cmd_name,
               ('Lighting', )),
    Production("cmd_name ->  'LOD'",
               'p72',
               N.cmd_name,
               ('LOD', )),
    Production("cmd_name ->  'SeparateSpecular'",
               'p73',
               N.cmd_name,
               ('SeparateSpecular', )),
    Production("cmd_name ->  'ZTest'",
               'p74',
               N.cmd_name,
               ('ZTest', )),
    Production("cmd_name ->  'ZWrite'",
               'p75',
               N.cmd_name,
               ('ZWrite', )),
    Production("id_or_number_or_placeholder ->  ID",
               'p76',
               N.id_or_number_or_placeholder,
               (T.ID, )),
    Production("id_or_number_or_placeholder ->  Number",
               'p77',
               N.id_or_number_or_placeholder,
               (T.Number, )),
    Production("id_or_number_or_placeholder ->  ( Number , Number , Number , Number )",
               'p78',
               N.id_or_number_or_placeholder,
               (T.LParen, T.Number, T.Comma, T.Number, T.Comma, T.Number, T.Comma, T.Number, T.RParen, )),
    Production("id_or_number_or_placeholder ->  placeholder",
               'p79',
               N.id_or_number_or_placeholder,
               (N.placeholder, )),
    Production("placeholder ->  [ ID ]",
               'p80',
               N.placeholder,
               (T.LBrack, T.ID, T.RBrack, )),
    Production("bind_channel_stms ->  bind_channel_stm bind_channel_stms",
               'p81',
               N.bind_channel_stms,
               (N.bind_channel_stm, N.bind_channel_stms, )),
    Production("bind_channel_stms -> ",
               'p82',
               N.bind_channel_stms,
               ()),
    Production("bind_channel_stm ->  'Bind' String , ID",
               'p83',
               N.bind_channel_stm,
               ('Bind', T.String, T.Comma, T.ID, )),
    Production("meterial_stms ->  meterial_stm meterial_stms",
               'p84',
               N.meterial_stms,
               (N.meterial_stm, N.meterial_stms, )),
    Production("meterial_stms -> ",
               'p85',
               N.meterial_stms,
               ()),
    Production("meterial_stm ->  ID id_or_number_or_placeholder",
               'p86',
               N.meterial_stm,
               (T.ID, N.id_or_number_or_placeholder, )),
    Production("stencil_stms ->  stencil_stm stencil_stms",
               'p87',
               N.stencil_stms,
               (N.stencil_stm, N.stencil_stms, )),
    Production("stencil_stms -> ",
               'p88',
               N.stencil_stms,
               ()),
    Production("stencil_stm ->  ID id_or_number_or_placeholder",
               'p89',
               N.stencil_stm,
               (T.ID, N.id_or_number_or_placeholder, )),
    Production("set_texture_stms ->  set_texture_stm set_texture_stms",
               'p90',
               N.set_texture_stms,
               (N.set_texture_stm, N.set_texture_stms, )),
    Production("set_texture_stms -> ",
               'p91',
               N.set_texture_stms,
               ()),
    Production("set_texture_stm ->  'matrix' placeholder",
               'p92',
               N.set_texture_stm,
               ('matrix', N.placeholder, )),
    Production("set_texture_stm ->  'constantColor' id_or_number_or_placeholder",
               'p93',
               N.set_texture_stm,
               ('constantColor', N.id_or_number_or_placeholder, )),
    Production("set_texture_stm ->  'combine' combine_options",
               'p94',
               N.set_texture_stm,
               ('combine', N.combine_options, )),
    Production("combine_options ->  combine_option combine_options",
               'p95',
               N.combine_options,
               (N.combine_option, N.combine_options, )),
    Production("combine_options ->  combine_option , combine_options",
               'p96',
               N.combine_options,
               (N.combine_option, T.Comma, N.combine_options, )),
    Production("combine_options ->  combine_option combine_option_op combine_options",
               'p97',
               N.combine_options,
               (N.combine_option, N.combine_option_op, N.combine_options, )),
    Production("combine_options -> ",
               'p98',
               N.combine_options,
               ()),
    Production("combine_option ->  ID",
               'p99',
               N.combine_option,
               (T.ID, )),
    Production("combine_option ->  ( ID )",
               'p100',
               N.combine_option,
               (T.LParen, T.ID, T.RParen, )),
    Production("combine_option_op ->  +",
               'p101',
               N.combine_option_op,
               (T.Plus, )),
    Production("combine_option_op ->  -",
               'p102',
               N.combine_option_op,
               (T.Minus, )),
    Production("combine_option_op ->  *",
               'p103',
               N.combine_option_op,
               (T.Times, )),
    Production("combine_option_op ->  /",
               'p104',
               N.combine_option_op,
               (T.Divide, )),
    Production("tags_stms ->  tag_smt tags_stms",
               'p105',
               N.tags_stms,
               (N.tag_smt, N.tags_stms, )),
    Production("tags_stms -> ",
               'p106',
               N.tags_stms,
               ()),
    Production("tag_smt ->  String = String",
               'p107',
               N.tag_smt,
               (T.String, T.Assign, T.String, )),
    Production("shr_pass ->  'Pass' { pass_body_elms }",
               'p108',
               N.shr_pass,
               ('Pass', T.LBrace, N.pass_body_elms, T.RBrace, )),
    Production("shr_pass ->  'GrabPass' { pass_body_elms }",
               'p109',
               N.shr_pass,
               ('GrabPass', T.LBrace, N.pass_body_elms, T.RBrace, )),
    Production("shr_pass ->  'UsePass' String",
               'p110',
               N.shr_pass,
               ('UsePass', T.String, )),
    Production("pass_body_elms ->  pass_body_elm pass_body_elms",
               'p111',
               N.pass_body_elms,
               (N.pass_body_elm, N.pass_body_elms, )),
    Production("pass_body_elms -> ",
               'p112',
               N.pass_body_elms,
               ()),
    Production("pass_body_elm ->  cmd_stm",
               'p113',
               N.pass_body_elm,
               (N.cmd_stm, )),
    Production("pass_body_elm ->  cg_prog",
               'p114',
               N.pass_body_elm,
               (N.cg_prog, )),
    Production("cg_prog ->  'CGPROGRAM' cg_prog_body 'ENDCG'",
               'p115',
               N.cg_prog,
               ('CGPROGRAM', N.cg_prog_body, 'ENDCG', )),
    Production("cg_prog ->  'CGINCLUDE' cg_prog_body 'ENDCG'",
               'p116',
               N.cg_prog,
               ('CGINCLUDE', N.cg_prog_body, 'ENDCG', )),
    Production("fall_back_cmd ->  'FallBack' String",
               'p117',
               N.fall_back_cmd,
               ('FallBack', T.String, )),
    Production("fall_back_cmd ->  'FallBack' 'Off'",
               'p118',
               N.fall_back_cmd,
               ('FallBack', 'Off', )),
    Production("custom_editor_cmd ->  'CustomEditor' String",
               'p119',
               N.custom_editor_cmd,
               ('CustomEditor', T.String, )),
    Production("dependency_cmd ->  'Dependency' String = String",
               'p120',
               N.dependency_cmd,
               ('Dependency', T.String, T.Assign, T.String, )),
    Production("id_list ->  ID",
               'p121',
               N.id_list,
               (T.ID, )),
    Production("id_list ->  ID id_list",
               'p122',
               N.id_list,
               (T.ID, N.id_list, )),
    Production("cg_prog_body ->  cg_stms",
               'p123',
               N.cg_prog_body,
               (N.cg_stms, )),
    Production("cg_stms ->  cg_stm cg_stms",
               'p124',
               N.cg_stms,
               (N.cg_stm, N.cg_stms, )),
    Production("cg_stms -> ",
               'p125',
               N.cg_stms,
               ()),
    Production("cg_stm ->  preprocessing_stm",
               'p126',
               N.cg_stm,
               (N.preprocessing_stm, )),
    Production("cg_stm ->  function_definition",
               'p127',
               N.cg_stm,
               (N.function_definition, )),
    Production("cg_stm ->  dec",
               'p128',
               N.cg_stm,
               (N.dec, )),
    Production("cg_stm ->  'CBUFFER_START' ( ID ) dec_list 'CBUFFER_END'",
               'p129',
               N.cg_stm,
               ('CBUFFER_START', T.LParen, T.ID, T.RParen, N.dec_list, 'CBUFFER_END', )),
    Production("function_definition ->  dec_specifier declarator compound_stm",
               'p130',
               N.function_definition,
               (N.dec_specifier, N.declarator, N.compound_stm, )),
    Production("function_definition ->  dec_specifier declarator : ID compound_stm",
               'p131',
               N.function_definition,
               (N.dec_specifier, N.declarator, T.Colon, T.ID, N.compound_stm, )),
    Production("function_definition ->  [ ID ( Number ) ] dec_specifier declarator compound_stm",
               'p132',
               N.function_definition,
               (T.LBrack, T.ID, T.LParen, T.Number, T.RParen, T.RBrack, N.dec_specifier, N.declarator, N.compound_stm, )),
    Production("function_definition ->  [ ID ( Number ) ] dec_specifier declarator : ID compound_stm",
               'p133',
               N.function_definition,
               (T.LBrack, T.ID, T.LParen, T.Number, T.RParen, T.RBrack, N.dec_specifier, N.declarator, T.Colon, T.ID, N.compound_stm, )),
    Production("preprocessing_stm ->  pp_if_stm",
               'p134',
               N.preprocessing_stm,
               (N.pp_if_stm, )),
    Production("preprocessing_stm ->  pp_cmd",
               'p135',
               N.preprocessing_stm,
               (N.pp_cmd, )),
    Production("preprocessing_stm ->  marco_unfold",
               'p136',
               N.preprocessing_stm,
               (N.marco_unfold, )),
    Production("pp_if_stm ->  # 'if' PPTokens",
               'p137',
               N.pp_if_stm,
               (T.Pound, 'if', T.PPTokens, )),
    Production("pp_if_stm ->  # 'ifdef' ID",
               'p138',
               N.pp_if_stm,
               (T.Pound, 'ifdef', T.ID, )),
    Production("pp_if_stm ->  # 'ifndef' ID",
               'p139',
               N.pp_if_stm,
               (T.Pound, 'ifndef', T.ID, )),
    Production("pp_if_stm ->  # 'elif' PPTokens",
               'p140',
               N.pp_if_stm,
               (T.Pound, 'elif', T.PPTokens, )),
    Production("pp_if_stm ->  # 'else'",
               'p141',
               N.pp_if_stm,
               (T.Pound, 'else', )),
    Production("pp_if_stm ->  # 'endif'",
               'p142',
               N.pp_if_stm,
               (T.Pound, 'endif', )),
    Production("pp_cmd ->  # 'include' String",
               'p143',
               N.pp_cmd,
               (T.Pound, 'include', T.String, )),
    Production("pp_cmd ->  # 'pragma' PPTokens",
               'p144',
               N.pp_cmd,
               (T.Pound, 'pragma', T.PPTokens, )),
    Production("pp_cmd ->  # 'define' PPTokens",
               'p145',
               N.pp_cmd,
               (T.Pound, 'define', T.PPTokens, )),
    Production("marco_unfold ->  exp ;",
               'p146',
               N.marco_unfold,
               (N.exp, T.Semicolon, )),
    Production("dec_list ->  dec",
               'p147',
               N.dec_list,
               (N.dec, )),
    Production("dec_list ->  dec_list dec",
               'p148',
               N.dec_list,
               (N.dec_list, N.dec, )),
    Production("primary_exp ->  ID",
               'p149',
               N.primary_exp,
               (T.ID, )),
    Production("primary_exp ->  String",
               'p150',
               N.primary_exp,
               (T.String, )),
    Production("primary_exp ->  Number",
               'p151',
               N.primary_exp,
               (T.Number, )),
    Production("primary_exp ->  ( exp )",
               'p152',
               N.primary_exp,
               (T.LParen, N.exp, T.RParen, )),
    Production("postfix_exp ->  primary_exp",
               'p153',
               N.postfix_exp,
               (N.primary_exp, )),
    Production("postfix_exp ->  postfix_exp [ exp ]",
               'p154',
               N.postfix_exp,
               (N.postfix_exp, T.LBrack, N.exp, T.RBrack, )),
    Production("postfix_exp ->  postfix_exp ( )",
               'p155',
               N.postfix_exp,
               (N.postfix_exp, T.LParen, T.RParen, )),
    Production("postfix_exp ->  postfix_exp ( argument_exp_list )",
               'p156',
               N.postfix_exp,
               (N.postfix_exp, T.LParen, N.argument_exp_list, T.RParen, )),
    Production("postfix_exp ->  buildin_type_name ( argument_exp_list )",
               'p157',
               N.postfix_exp,
               (N.buildin_type_name, T.LParen, N.argument_exp_list, T.RParen, )),
    Production("postfix_exp ->  postfix_exp . ID",
               'p158',
               N.postfix_exp,
               (N.postfix_exp, T.Dot, T.ID, )),
    Production("postfix_exp ->  postfix_exp ++",
               'p159',
               N.postfix_exp,
               (N.postfix_exp, T.Increment, )),
    Production("postfix_exp ->  postfix_exp --",
               'p160',
               N.postfix_exp,
               (N.postfix_exp, T.Decrement, )),
    Production("argument_exp_list ->  assignment_exp",
               'p161',
               N.argument_exp_list,
               (N.assignment_exp, )),
    Production("argument_exp_list ->  argument_exp_list , assignment_exp",
               'p162',
               N.argument_exp_list,
               (N.argument_exp_list, T.Comma, N.assignment_exp, )),
    Production("unary_exp ->  postfix_exp",
               'p163',
               N.unary_exp,
               (N.postfix_exp, )),
    Production("unary_exp ->  ++ unary_exp",
               'p164',
               N.unary_exp,
               (T.Increment, N.unary_exp, )),
    Production("unary_exp ->  -- unary_exp",
               'p165',
               N.unary_exp,
               (T.Decrement, N.unary_exp, )),
    Production("unary_exp ->  unary_op unary_exp",
               'p166',
               N.unary_exp,
               (N.unary_op, N.unary_exp, )),
    Production("unary_op ->  +",
               'p167',
               N.unary_op,
               (T.Plus, )),
    Production("unary_op ->  -",
               'p168',
               N.unary_op,
               (T.Minus, )),
    Production("unary_op ->  !",
               'p169',
               N.unary_op,
               (T.NOT, )),
    Production("unary_op ->  ~",
               'p170',
               N.unary_op,
               (T.Tilde, )),
    Production("cast_exp ->  unary_exp",
               'p171',
               N.cast_exp,
               (N.unary_exp, )),
    Production("cast_exp ->  ( buildin_type_name ) cast_exp",
               'p172',
               N.cast_exp,
               (T.LParen, N.buildin_type_name, T.RParen, N.cast_exp, )),
    Production("binary_exp ->  cast_exp",
               'p173',
               N.binary_exp,
               (N.cast_exp, )),
    Production("binary_exp ->  binary_exp binary_op unary_exp",
               'p174',
               N.binary_exp,
               (N.binary_exp, N.binary_op, N.unary_exp, )),
    Production("binary_op ->  *",
               'p175',
               N.binary_op,
               (T.Times, )),
    Production("binary_op ->  /",
               'p176',
               N.binary_op,
               (T.Divide, )),
    Production("binary_op ->  %",
               'p177',
               N.binary_op,
               (T.Percent, )),
    Production("binary_op ->  +",
               'p178',
               N.binary_op,
               (T.Plus, )),
    Production("binary_op ->  -",
               'p179',
               N.binary_op,
               (T.Minus, )),
    Production("binary_op ->  <<",
               'p180',
               N.binary_op,
               (T.LeftShift, )),
    Production("binary_op ->  >>",
               'p181',
               N.binary_op,
               (T.RightShift, )),
    Production("binary_op ->  <",
               'p182',
               N.binary_op,
               (T.LT, )),
    Production("binary_op ->  >",
               'p183',
               N.binary_op,
               (T.GT, )),
    Production("binary_op ->  <=",
               'p184',
               N.binary_op,
               (T.LE, )),
    Production("binary_op ->  >=",
               'p185',
               N.binary_op,
               (T.GE, )),
    Production("binary_op ->  ==",
               'p186',
               N.binary_op,
               (T.EQ, )),
    Production("binary_op ->  !=",
               'p187',
               N.binary_op,
               (T.NEQ, )),
    Production("binary_op ->  &",
               'p188',
               N.binary_op,
               (T.Ampersand, )),
    Production("binary_op ->  ^",
               'p189',
               N.binary_op,
               (T.Caret, )),
    Production("binary_op ->  |",
               'p190',
               N.binary_op,
               (T.VerticalBar, )),
    Production("binary_op ->  &&",
               'p191',
               N.binary_op,
               (T.AND, )),
    Production("binary_op ->  ||",
               'p192',
               N.binary_op,
               (T.OR, )),
    Production("conditional_exp ->  binary_exp",
               'p193',
               N.conditional_exp,
               (N.binary_exp, )),
    Production("conditional_exp ->  binary_exp ? exp : conditional_exp",
               'p194',
               N.conditional_exp,
               (N.binary_exp, T.Question, N.exp, T.Colon, N.conditional_exp, )),
    Production("assignment_exp ->  conditional_exp",
               'p195',
               N.assignment_exp,
               (N.conditional_exp, )),
    Production("assignment_exp ->  unary_exp assignment_op assignment_exp",
               'p196',
               N.assignment_exp,
               (N.unary_exp, N.assignment_op, N.assignment_exp, )),
    Production("assignment_op ->  =",
               'p197',
               N.assignment_op,
               (T.Assign, )),
    Production("assignment_op ->  *=",
               'p198',
               N.assignment_op,
               (T.AddAssign, )),
    Production("assignment_op ->  /=",
               'p199',
               N.assignment_op,
               (T.SubAssign, )),
    Production("assignment_op ->  %=",
               'p200',
               N.assignment_op,
               (T.MulAssign, )),
    Production("assignment_op ->  +=",
               'p201',
               N.assignment_op,
               (T.DivAssign, )),
    Production("assignment_op ->  -=",
               'p202',
               N.assignment_op,
               (T.ModAssign, )),
    Production("assignment_op ->  <<=",
               'p203',
               N.assignment_op,
               (T.LeftShiftAssign, )),
    Production("assignment_op ->  >>=",
               'p204',
               N.assignment_op,
               (T.RightShiftAssign, )),
    Production("assignment_op ->  &=",
               'p205',
               N.assignment_op,
               (T.AndAssign, )),
    Production("assignment_op ->  ^=",
               'p206',
               N.assignment_op,
               (T.XorAssign, )),
    Production("assignment_op ->  |=",
               'p207',
               N.assignment_op,
               (T.OrAssign, )),
    Production("exp ->  assignment_exp",
               'p208',
               N.exp,
               (N.assignment_exp, )),
    Production("exp ->  exp , assignment_exp",
               'p209',
               N.exp,
               (N.exp, T.Comma, N.assignment_exp, )),
    Production("dec ->  struct_specifier ;",
               'p210',
               N.dec,
               (N.struct_specifier, T.Semicolon, )),
    Production("dec ->  dec_specifier init_dec_list ;",
               'p211',
               N.dec,
               (N.dec_specifier, N.init_dec_list, T.Semicolon, )),
    Production("dec_specifier ->  type_specifier",
               'p212',
               N.dec_specifier,
               (N.type_specifier, )),
    Production("dec_specifier ->  type_qualifier dec_specifier",
               'p213',
               N.dec_specifier,
               (N.type_qualifier, N.dec_specifier, )),
    Production("dec_specifier ->  storage_class_specifier dec_specifier",
               'p214',
               N.dec_specifier,
               (N.storage_class_specifier, N.dec_specifier, )),
    Production("type_specifier ->  buildin_type_name",
               'p215',
               N.type_specifier,
               (N.buildin_type_name, )),
    Production("type_specifier ->  typedef_name",
               'p216',
               N.type_specifier,
               (N.typedef_name, )),
    Production("buildin_type_name ->  'void'",
               'p217',
               N.buildin_type_name,
               ('void', )),
    Production("buildin_type_name ->  'char'",
               'p218',
               N.buildin_type_name,
               ('char', )),
    Production("buildin_type_name ->  'short'",
               'p219',
               N.buildin_type_name,
               ('short', )),
    Production("buildin_type_name ->  'int'",
               'p220',
               N.buildin_type_name,
               ('int', )),
    Production("buildin_type_name ->  'long'",
               'p221',
               N.buildin_type_name,
               ('long', )),
    Production("buildin_type_name ->  'fixed'",
               'p222',
               N.buildin_type_name,
               ('fixed', )),
    Production("buildin_type_name ->  'half'",
               'p223',
               N.buildin_type_name,
               ('half', )),
    Production("buildin_type_name ->  'float'",
               'p224',
               N.buildin_type_name,
               ('float', )),
    Production("buildin_type_name ->  'double'",
               'p225',
               N.buildin_type_name,
               ('double', )),
    Production("buildin_type_name ->  'sampler2D'",
               'p226',
               N.buildin_type_name,
               ('sampler2D', )),
    Production("buildin_type_name ->  'float2'",
               'p227',
               N.buildin_type_name,
               ('float2', )),
    Production("buildin_type_name ->  'float3'",
               'p228',
               N.buildin_type_name,
               ('float3', )),
    Production("buildin_type_name ->  'float4'",
               'p229',
               N.buildin_type_name,
               ('float4', )),
    Production("buildin_type_name ->  'half2'",
               'p230',
               N.buildin_type_name,
               ('half2', )),
    Production("buildin_type_name ->  'half3'",
               'p231',
               N.buildin_type_name,
               ('half3', )),
    Production("buildin_type_name ->  'half4'",
               'p232',
               N.buildin_type_name,
               ('half4', )),
    Production("buildin_type_name ->  'fixed2'",
               'p233',
               N.buildin_type_name,
               ('fixed2', )),
    Production("buildin_type_name ->  'fixed3'",
               'p234',
               N.buildin_type_name,
               ('fixed3', )),
    Production("buildin_type_name ->  'fixed4'",
               'p235',
               N.buildin_type_name,
               ('fixed4', )),
    Production("buildin_type_name ->  'float3x3'",
               'p236',
               N.buildin_type_name,
               ('float3x3', )),
    Production("type_qualifier ->  'uniform'",
               'p237',
               N.type_qualifier,
               ('uniform', )),
    Production("type_qualifier ->  'inline'",
               'p238',
               N.type_qualifier,
               ('inline', )),
    Production("type_qualifier ->  'const'",
               'p239',
               N.type_qualifier,
               ('const', )),
    Production("storage_class_specifier ->  'static'",
               'p240',
               N.storage_class_specifier,
               ('static', )),
    Production("typedef_name ->  ID",
               'p241',
               N.typedef_name,
               (T.ID, )),
    Production("struct_specifier ->  'struct' ID",
               'p242',
               N.struct_specifier,
               ('struct', T.ID, )),
    Production("struct_specifier ->  'struct' ID { struct_dec_list }",
               'p243',
               N.struct_specifier,
               ('struct', T.ID, T.LBrace, N.struct_dec_list, T.RBrace, )),
    Production("struct_dec_list ->  struct_dec",
               'p244',
               N.struct_dec_list,
               (N.struct_dec, )),
    Production("struct_dec_list ->  struct_dec_list struct_dec",
               'p245',
               N.struct_dec_list,
               (N.struct_dec_list, N.struct_dec, )),
    Production("struct_dec ->  type_specifier struct_declarator_list ;",
               'p246',
               N.struct_dec,
               (N.type_specifier, N.struct_declarator_list, T.Semicolon, )),
    Production("struct_dec ->  ID ;",
               'p247',
               N.struct_dec,
               (T.ID, T.Semicolon, )),
    Production("struct_dec ->  ID ( Number )",
               'p248',
               N.struct_dec,
               (T.ID, T.LParen, T.Number, T.RParen, )),
    Production("struct_dec ->  ID ( Number , Number )",
               'p249',
               N.struct_dec,
               (T.ID, T.LParen, T.Number, T.Comma, T.Number, T.RParen, )),
    Production("struct_dec ->  pp_if_stm",
               'p250',
               N.struct_dec,
               (N.pp_if_stm, )),
    Production("struct_dec ->  'INTERNAL_DATA'",
               'p251',
               N.struct_dec,
               ('INTERNAL_DATA', )),
    Production("struct_dec ->  'UNITY_VERTEX_INPUT_INSTANCE_ID'",
               'p252',
               N.struct_dec,
               ('UNITY_VERTEX_INPUT_INSTANCE_ID', )),
    Production("struct_dec ->  'UNITY_VERTEX_OUTPUT_STEREO'",
               'p253',
               N.struct_dec,
               ('UNITY_VERTEX_OUTPUT_STEREO', )),
    Production("struct_declarator_list ->  struct_declarator",
               'p254',
               N.struct_declarator_list,
               (N.struct_declarator, )),
    Production("struct_declarator_list ->  struct_declarator_list , struct_declarator",
               'p255',
               N.struct_declarator_list,
               (N.struct_declarator_list, T.Comma, N.struct_declarator, )),
    Production("struct_declarator ->  declarator",
               'p256',
               N.struct_declarator,
               (N.declarator, )),
    Production("struct_declarator ->  declarator : ID",
               'p257',
               N.struct_declarator,
               (N.declarator, T.Colon, T.ID, )),
    Production("declarator ->  ID",
               'p258',
               N.declarator,
               (T.ID, )),
    Production("declarator ->  declarator [ exp ]",
               'p259',
               N.declarator,
               (N.declarator, T.LBrack, N.exp, T.RBrack, )),
    Production("declarator ->  declarator ( )",
               'p260',
               N.declarator,
               (N.declarator, T.LParen, T.RParen, )),
    Production("declarator ->  declarator ( parameter_list )",
               'p261',
               N.declarator,
               (N.declarator, T.LParen, N.parameter_list, T.RParen, )),
    Production("parameter_list ->  parameter_dec",
               'p262',
               N.parameter_list,
               (N.parameter_dec, )),
    Production("parameter_list ->  parameter_list , parameter_dec",
               'p263',
               N.parameter_list,
               (N.parameter_list, T.Comma, N.parameter_dec, )),
    Production("parameter_dec ->  parameter_dec_specifier declarator",
               'p264',
               N.parameter_dec,
               (N.parameter_dec_specifier, N.declarator, )),
    Production("parameter_dec ->  parameter_dec_specifier declarator : ID",
               'p265',
               N.parameter_dec,
               (N.parameter_dec_specifier, N.declarator, T.Colon, T.ID, )),
    Production("parameter_dec_specifier ->  dec_specifier",
               'p266',
               N.parameter_dec_specifier,
               (N.dec_specifier, )),
    Production("parameter_dec_specifier ->  'out' dec_specifier",
               'p267',
               N.parameter_dec_specifier,
               ('out', N.dec_specifier, )),
    Production("parameter_dec_specifier ->  'inout' dec_specifier",
               'p268',
               N.parameter_dec_specifier,
               ('inout', N.dec_specifier, )),
    Production("parameter_dec_specifier ->  'triangle' dec_specifier",
               'p269',
               N.parameter_dec_specifier,
               ('triangle', N.dec_specifier, )),
    Production("parameter_dec_specifier ->  'inout' 'TriangleStream' < ID >",
               'p270',
               N.parameter_dec_specifier,
               ('inout', 'TriangleStream', T.LT, T.ID, T.GT, )),
    Production("init_dec_list ->  init_dec",
               'p271',
               N.init_dec_list,
               (N.init_dec, )),
    Production("init_dec_list ->  init_dec_list , init_dec",
               'p272',
               N.init_dec_list,
               (N.init_dec_list, T.Comma, N.init_dec, )),
    Production("init_dec ->  declarator",
               'p273',
               N.init_dec,
               (N.declarator, )),
    Production("init_dec ->  declarator = initializer",
               'p274',
               N.init_dec,
               (N.declarator, T.Assign, N.initializer, )),
    Production("initializer ->  assignment_exp",
               'p275',
               N.initializer,
               (N.assignment_exp, )),
    Production("initializer ->  { initializer_list }",
               'p276',
               N.initializer,
               (T.LBrace, N.initializer_list, T.RBrace, )),
    Production("initializer ->  { initializer_list , }",
               'p277',
               N.initializer,
               (T.LBrace, N.initializer_list, T.Comma, T.RBrace, )),
    Production("initializer_list ->  initializer",
               'p278',
               N.initializer_list,
               (N.initializer, )),
    Production("initializer_list ->  initializer_list , initializer",
               'p279',
               N.initializer_list,
               (N.initializer_list, T.Comma, N.initializer, )),
    Production("stm ->  exp_stm",
               'p280',
               N.stm,
               (N.exp_stm, )),
    Production("stm ->  compound_stm",
               'p281',
               N.stm,
               (N.compound_stm, )),
    Production("stm ->  selection_stm",
               'p282',
               N.stm,
               (N.selection_stm, )),
    Production("stm ->  iteration_stm",
               'p283',
               N.stm,
               (N.iteration_stm, )),
    Production("stm ->  jump_stm",
               'p284',
               N.stm,
               (N.jump_stm, )),
    Production("stm ->  pp_if_stm",
               'p285',
               N.stm,
               (N.pp_if_stm, )),
    Production("stm ->  'UNITY_BRANCH'",
               'p286',
               N.stm,
               ('UNITY_BRANCH', )),
    Production("stm ->  'UNITY_UNROLL'",
               'p287',
               N.stm,
               ('UNITY_UNROLL', )),
    Production("stm ->  'TRANSFER_SHADOW_CASTER_NORMALOFFSET' ( ID )",
               'p288',
               N.stm,
               ('TRANSFER_SHADOW_CASTER_NORMALOFFSET', T.LParen, T.ID, T.RParen, )),
    Production("stm ->  'SHADOW_CASTER_FRAGMENT' ( ID )",
               'p289',
               N.stm,
               ('SHADOW_CASTER_FRAGMENT', T.LParen, T.ID, T.RParen, )),
    Production("stm ->  'SPEEDTREE_COPY_FRAG' ( ID , ID )",
               'p290',
               N.stm,
               ('SPEEDTREE_COPY_FRAG', T.LParen, T.ID, T.Comma, T.ID, T.RParen, )),
    Production("stm ->  'UNITY_TRANSFER_DITHER_CROSSFADE_HPOS' ( argument_exp_list )",
               'p291',
               N.stm,
               ('UNITY_TRANSFER_DITHER_CROSSFADE_HPOS', T.LParen, N.argument_exp_list, T.RParen, )),
    Production("stm ->  'UNITY_APPLY_DITHER_CROSSFADE' ( ID )",
               'p292',
               N.stm,
               ('UNITY_APPLY_DITHER_CROSSFADE', T.LParen, T.ID, T.RParen, )),
    Production("exp_stm ->  exp ;",
               'p293',
               N.exp_stm,
               (N.exp, T.Semicolon, )),
    Production("exp_stm ->  ;",
               'p294',
               N.exp_stm,
               (T.Semicolon, )),
    Production("compound_stm ->  { block_item_list }",
               'p295',
               N.compound_stm,
               (T.LBrace, N.block_item_list, T.RBrace, )),
    Production("compound_stm ->  { }",
               'p296',
               N.compound_stm,
               (T.LBrace, T.RBrace, )),
    Production("block_item_list ->  block_item",
               'p297',
               N.block_item_list,
               (N.block_item, )),
    Production("block_item_list ->  block_item_list block_item",
               'p298',
               N.block_item_list,
               (N.block_item_list, N.block_item, )),
    Production("block_item ->  dec",
               'p299',
               N.block_item,
               (N.dec, )),
    Production("block_item ->  stm",
               'p300',
               N.block_item,
               (N.stm, )),
    Production("selection_stm ->  'if' ( exp ) stm",
               'p301',
               N.selection_stm,
               ('if', T.LParen, N.exp, T.RParen, N.stm, )),
    Production("selection_stm ->  'if' ( exp ) stm 'else' stm",
               'p302',
               N.selection_stm,
               ('if', T.LParen, N.exp, T.RParen, N.stm, 'else', N.stm, )),
    Production("iteration_stm ->  'while' ( exp ) stm",
               'p303',
               N.iteration_stm,
               ('while', T.LParen, N.exp, T.RParen, N.stm, )),
    Production("iteration_stm ->  'do' stm 'while' ( exp ) ;",
               'p304',
               N.iteration_stm,
               ('do', N.stm, 'while', T.LParen, N.exp, T.RParen, T.Semicolon, )),
    Production("iteration_stm ->  'for' ( exp ; exp ; exp ) stm",
               'p305',
               N.iteration_stm,
               ('for', T.LParen, N.exp, T.Semicolon, N.exp, T.Semicolon, N.exp, T.RParen, N.stm, )),
    Production("iteration_stm ->  'for' ( dec_specifier init_dec_list ; exp ; exp ) stm",
               'p306',
               N.iteration_stm,
               ('for', T.LParen, N.dec_specifier, N.init_dec_list, T.Semicolon, N.exp, T.Semicolon, N.exp, T.RParen, N.stm, )),
    Production("jump_stm ->  'goto' ID",
               'p307',
               N.jump_stm,
               ('goto', T.ID, )),
    Production("jump_stm ->  'continue'",
               'p308',
               N.jump_stm,
               ('continue', )),
    Production("jump_stm ->  'break'",
               'p309',
               N.jump_stm,
               ('break', )),
    Production("jump_stm ->  'return' exp ;",
               'p310',
               N.jump_stm,
               ('return', N.exp, T.Semicolon, )),
]


class Test(unittest.TestCase):

    def test(self):
        for production in productionList:
            print(production)


    def DtestTokenType(self):
        for ty in T:
            print(ty)


def _init():
    Nonterminal.postInitialize(productionList)


_init()
